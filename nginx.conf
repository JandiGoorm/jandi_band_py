upstream jenkins {
    server localhost:8080;
}

upstream spring-app {
    server localhost:8081;
}

upstream flask-app {
    server localhost:5001;
}

server {
    listen 80;
    server_name your-domain.com;  # 실제 도메인으로 변경

    # SSL 리다이렉트 (HTTPS 설정 시)
    # return 301 https://$server_name$request_uri;

    # Jenkins 리버스 프록시
    location /jenkins/ {
        proxy_pass http://jenkins/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Jenkins 특화 설정
        proxy_read_timeout 90;
        proxy_redirect http://localhost:8080 https://your-domain.com/jenkins;
    }

    # Spring Boot API 리버스 프록시
    location /api/ {
        proxy_pass http://spring-app/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS 헤더 (필요시)
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
    }

    # Flask 스크래핑 API 리버스 프록시
    location /scraper/ {
        rewrite ^/scraper/(.*) /$1 break;
        proxy_pass http://flask-app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS 헤더
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
        
        # 스크래핑 요청은 시간이 걸릴 수 있음
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
    }

    # 정적 파일 서빙 (필요시)
    location /static/ {
        alias /var/www/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # 헬스체크 엔드포인트
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# HTTPS 설정 (SSL 인증서 설정 시)
server {
    listen 443 ssl http2;
    server_name your-domain.com;

    # SSL 인증서 경로 (Let's Encrypt 등으로 발급받은 인증서)
    # ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;

    # SSL 설정
    ssl_session_cache shared:le_nginx_SSL:10m;
    ssl_session_timeout 1440m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;

    # 나머지 location 블록들은 HTTP 설정과 동일
    # (위의 location 블록들을 그대로 복사)
} 